import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import {
	addTodoItem,
	getAllTodoItems,
	modifyTodoItem,
	deleteTodoItem,
} from "./todoUtils";

const initialState = {
	status: "idle",
	todoItems: [],
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const addTodoItemAsync = createAsyncThunk(
	"category/addTodoItem",
	async (data) => {
		const resData = await addTodoItem(data);
		// The value we return becomes the `fulfilled` action payload
		return resData;
	}
);

export const getAllTodoItemsAsync = createAsyncThunk(
	"category/getAllTodoItems",
	async (data) => {
		const resData = await getAllTodoItems(data);
		// The value we return becomes the `fulfilled` action payload
		return resData;
	}
);

export const modifyTodoItemAsync = createAsyncThunk(
	"category/modifyTodoItem",
	async (data) => {
		const resData = await modifyTodoItem(data);
		// The value we return becomes the `fulfilled` action payload
		return resData;
	}
);

export const deleteTodoItemAsync = createAsyncThunk(
	"category/deleteTodoItem",
	async (data) => {
		const resData = await deleteTodoItem(data);
		// The value we return becomes the `fulfilled` action payload
		return resData;
	}
);

export const todoSlice = createSlice({
	name: "todo",
	initialState,
	// The `reducers` field lets us define reducers and generate associated actions
	reducers: {
		addItemToTodoItems: (state, action) => {
			const item = action.payload;
			state.todoItems.push(item);
		},
		modifyItemInTodoItems: (state, action) => {
			const item = action.payload;
			state.todoItems = state.todoItems.map((todoItem) =>
				todoItem._id === item._id ? item : todoItem
			);
		},
		deleteItemFromTodoItems: (state, action) => {
			const item = action.payload;
			state.todoItems = state.todoItems.filter(
				(todoItem) => todoItem._id !== item._id
			);
		},
	},
	// The `extraReducers` field lets the slice handle actions defined elsewhere,
	// including actions generated by createAsyncThunk or in other slices.
	extraReducers: (builder) => {
		builder
			.addCase(addTodoItemAsync.pending, (state) => {
				state.status = "loading";
			})
			.addCase(addTodoItemAsync.fulfilled, (state, action) => {
				const todoData = JSON.parse(JSON.stringify(action.payload));
				state.status = "idle";
				state.todoItems = [todoData].concat(state.todoItems);
			})
			.addCase(addTodoItemAsync.rejected, (state) => {
				state.status = "error";
			})
			.addCase(getAllTodoItemsAsync.pending, (state) => {
				state.status = "loading";
			})
			.addCase(getAllTodoItemsAsync.fulfilled, (state, action) => {
				const todoData = JSON.parse(JSON.stringify(action.payload));
				state.status = "idle";
				state.todoItems = todoData;
			})
			.addCase(getAllTodoItemsAsync.rejected, (state) => {
				state.status = "error";
			})
			.addCase(modifyTodoItemAsync.pending, (state) => {
				state.status = "loading";
			})
			.addCase(modifyTodoItemAsync.fulfilled, (state, action) => {
				const todoData = JSON.parse(JSON.stringify(action.payload));
				state.status = "idle";
				state.todoItems = state.todoItems.map((todoItem) =>
					todoItem._id === todoData._id ? todoData : todoItem
				);
			})
			.addCase(modifyTodoItemAsync.rejected, (state) => {
				state.status = "error";
			})
			.addCase(deleteTodoItemAsync.pending, (state) => {
				state.status = "loading";
			})
			.addCase(deleteTodoItemAsync.fulfilled, (state, action) => {
				const todoData= JSON.parse(JSON.stringify(action.payload));
				state.todoItems = state.todoItems.filter(
					(todoItem) => todoItem._id !== todoData._id
				);
			})
			.addCase(deleteTodoItemAsync.rejected, (state, action) => {
				state.status = "error";
			});
	},
});

export const { addItemToTodoItems, modifyItemInTodoItems, deleteItemFromTodoItems } = todoSlice.actions;

export default todoSlice.reducer;
